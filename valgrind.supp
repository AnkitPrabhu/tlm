{
   libstdc++6_Memory_leak_in_pool_constructor/https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65434
   Memcheck:Leak
   match-leak-kinds: reachable
   ...
   fun:malloc
   obj:*/libstdc++.so*
   fun:call_init.part.0
   fun:call_init
   fun:_dl_init
   obj:/lib/x86_64-linux-gnu/ld-2.15.so
   ...
}

{
   Ignore dlopen bug http://stackoverflow.com/questions/1542457/memory-leak-reported-by-valgrind-in-dlopen
   Memcheck:Leak
   ...
   fun:_dlerror_run
   fun:dlopen@@GLIBC_2.2.5
   ...
}
{
   Ignore dlopen bug (2) http://stackoverflow.com/questions/1542457/memory-leak-reported-by-valgrind-in-dlopen
   Memcheck:Leak
   ...
   fun:_dlerror_run
   fun:dlclose
   ...
}


# The following suppressions are for memcached background threads
# which are not cleanly 'joined' on shutdown; hence they have some
# allocations which are still reachable. Given there's no easy way to
# signal to these threads that the process has terminated (and they
# arn't actual "leaks") we choose suppress them.
{
   memcached_parent_monitor_thread_name
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:je_malloc
   fun:malloc
   fun:strdup
   fun:cb_create_named_thread
   fun:setup_parent_monitor
   fun:main
}
{
   memcached_parent_monitor_thread_context
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:je_malloc
   fun:malloc
   fun:cb_create_named_thread
   fun:setup_parent_monitor
   fun:main
}
{
   memcached_parent_monitor_thread_stack
   Memcheck:Leak
   match-leak-kinds: possible
   fun:je_calloc
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls
   fun:allocate_stack
   fun:pthread_create@@GLIBC_2.2.5
   fun:cb_create_named_thread
   fun:setup_parent_monitor
   fun:main
}
